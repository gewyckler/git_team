import java.io.*;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Scanner;

import static java.lang.Long.parseLong;

public class ContentLoader {
    public void zapiszDoPliku(Magazyn magazyn) {
        try {
            PrintWriter printWriter = new PrintWriter(new FileWriter("stan_magazynu.txt", true));
            printWriter.println(magazyn.getMapaZamowien());
            printWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void wczytajZPliku() {
        try {
            Scanner scanner = new Scanner(new FileReader("stan_magazynu"));
            while (scanner.hasNextLine()) {
                System.out.println(scanner.nextLine());
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    public void dodajDostawe(String nrDostawy, Magazyn magazynSklepu) {
        Scanner scanner = new Scanner(System.in);

        String chose = null;

        Zamowienie zamowienie = magazynSklepu.getMapaZamowien().get(nrDostawy);
        if (magazynSklepu.getMapaZamowien().containsKey(nrDostawy) && zamowienie.isCzyDostarczoneZamowienie() == false) {
            System.out.println("Zamówienie zawiera " + zamowienie.getListaProduktowZamawiana().keySet().stream().count() + " produkty.");
            for (Produkt produkt : zamowienie.getListaProduktowZamawiana().values()) {
                System.out.println(produkt.getNazwa() + " w ilości: " + produkt.getIlosc());
            }
            for (Produkt produkt : zamowienie.getListaProduktowZamawiana().values()) {
                System.out.println("Czy w dostawie znajduje się produkt: " + produkt.getNazwa() + ", cena " + produkt.getCena()
                        + ", ilość " + produkt.getIlosc() + "? tak/nie");
                do {
                    chose = takLubNie(scanner);
                    switch (chose) {
                        //jesli w zamowieniu znajduje sie produkt to zwiększamy jego ilość w magazynie sklepu
                        case "tak":
                            produkt.dostarczono();
                            magazynSklepu.zwiekszLiczbeWMagazynie(produkt);
                            break;
                        case "nie":
                            //jesli w zamowieniu nie ma produktu zamowionego to oznaczamy jako niedostarczony
                            produkt.nieDostarczono();
                            break;
                        default:
                            System.out.println("Wpisz \"tak\" lub \"nie\".");
                            break;
                    }
                } while (!chose.equalsIgnoreCase("tak") && !chose.equalsIgnoreCase("nie"));
            }

//DODANIE NR FAKTURY DO ZAMOWNIE
            wpiszNrFaktury(scanner, zamowienie);

//CZY CHCESZ WPISAC DATE ZAMOWIENIA RECZNIE
            System.out.println("Czy chcesz ustawić datę dostawy ręcznie? tak/nie");
            String czyTak = takLubNie(scanner);
            LocalDateTime czasOdUzytkownia;
            DateTimeFormatter formaterDaty = DateTimeFormatter.ofPattern("HH:mm dd-MM-yyyy");

//JESLI TAK TO WPISUJE W PODANYM FORMACIE
            if (czyTak.equalsIgnoreCase("tak")) {
                czasOdUzytkownia = manualyGeneratedDate(scanner, formaterDaty);
                //odjac od daty zamowienia. Jesli powyzej 1 min to spoznione, jesli ponizej to zmiescilo sie w czasie.
                checkIfOrderIsLateOrNot(zamowienie, czasOdUzytkownia);
            }
//JESLI NIE TO DATA GENERUJE SIE AUTOMATYCZNIE
            else {
                LocalDateTime dataAuto = autoGeneratedDate(formaterDaty);
                //odjac od daty zamowienia. Jesli powyzej 1 min to spoznione, jesli ponizej to zmiescilo sie w czasie.
                checkIfOrderIsLateOrNot(zamowienie, dataAuto);
            }
            // po zrealizowaniu zamowienia czyli dostarczeniu do sklepu zamowienie jest oznaczone jako dostarczone
            zamowienie.dostarczono();

        } else if (magazynSklepu.getMapaZamowien().containsKey(nrDostawy) && zamowienie.isCzyDostarczoneZamowienie() == true) {
            System.out.println("Zamówienie o podanym numerze " + zamowienie.getNumer() + " zostało już zrealizowane.");

        } else if (!magazynSklepu.getMapaZamowien().containsKey(nrDostawy)) {
            System.out.println("Zamowienie o podanym numerze nie istnieje.");

        } else if (magazynSklepu.getMapaZamowien().isEmpty()) {
            System.out.println("Lista zamówień jest pusta.");
        }


    }

    public void czekajNaKlikniecie() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Kliknij Enter aby przejść dalej...");
        scanner.nextLine();
    }

    private void wpiszNrFaktury(Scanner scanner, Zamowienie zamowienie) {
        System.out.println("Zamowienie zrealizowane. Podaj numer faktury: ");
        Long numerFaktury = null;
        do {
            try {
                numerFaktury = parseLong(scanner.nextLine());
                zamowienie.ustawyNrFaktury(numerFaktury);
            } catch (NumberFormatException e) {
                System.err.println("Podano zły format numeru. Tylko cyfry!");
            }
        } while (numerFaktury == null);
    }

    private void checkIfOrderIsLateOrNot(Zamowienie zamowienie, LocalDateTime czasOdUzytkownika) {
        Duration duration = Duration.between(zamowienie.getDataZamowienie(), czasOdUzytkownika);
        System.out.println(duration.getSeconds());

//odjac od daty zamowienia. Jesli powyzej 1 min to spoznione, jesli ponizej to zmiescilo sie w czasie.
        if (duration.getSeconds() > 60L) {

            long roznica = duration.getSeconds() - 60L;
            System.out.println("Zamowienie spoznilo sie o " + roznica);

        } else {

            System.out.println("Zamowienie dostarczono w ciągu " + duration.getSeconds() + " s. " + "Wymagany czas dostawy to 1 min\n");
        }
    }

    private LocalDateTime autoGeneratedDate(DateTimeFormatter formaterDaty) {
        LocalDateTime dataAuto = LocalDateTime.now();
        dataAuto.format(formaterDaty);
        return dataAuto;
    }

    private LocalDateTime manualyGeneratedDate(Scanner scanner, DateTimeFormatter formaterDaty) {
        String godzinaDostawy;
        String dataDostawy;
        String dataIGodzinaDostawy;
        LocalDateTime czasOdUzytkownika = null;
        do {
            System.out.println("Podaj godzine dostawy wedlug wzoru -> HH:mm");
            godzinaDostawy = scanner.next();
            System.out.println("Podaj datę według wzoru -> dd-MM-yyyy");
            dataDostawy = scanner.next();
            dataIGodzinaDostawy = godzinaDostawy + " " + dataDostawy;
            czasOdUzytkownika = null;
            try {
                czasOdUzytkownika = LocalDateTime.parse(dataIGodzinaDostawy, formaterDaty);
            } catch (DateTimeParseException dtpe) {
                System.err.println("Zły format!");
            }
        } while (czasOdUzytkownika == null);
        return czasOdUzytkownika;
    }

    private String takLubNie(Scanner scanner) {
        String takNie = scanner.nextLine();
        return takNie;
    }

}
